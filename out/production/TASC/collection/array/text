Định nghĩa
    Mảng (Array) trong Java là một cấu trúc dữ liệu dùng để lưu trữ tập hợp các phần tử cùng kiểu dữ liệu (primitive hoặc object).
    Các phần tử trong mảng được lưu liên tiếp nhau trong bộ nhớ và được truy cập bằng chỉ số (index) bắt đầu từ 0.

Cú pháp khai báo và khởi tạo
    Có 2 cách chính:

    // Khai báo mảng
    int[] numbers;        // thường dùng
    int numbers[];        // cũng hợp lệ nhưng ít dùng

    // Khởi tạo mảng với kích thước cố định
    numbers = new int[5];   // mảng 5 phần tử kiểu int, mặc định = 0

    // Khởi tạo mảng với giá trị có sẵn
    int[] primes = {2, 3, 5, 7, 11};

Đặc điểm
    Kích thước cố định: Khi đã khởi tạo thì không thể thay đổi số phần tử (nếu muốn linh hoạt nên dùng ArrayList).
    Chỉ số: phần tử đầu tiên là array[0], phần tử cuối là array[array.length - 1].
    Kiểu dữ liệu: tất cả phần tử phải cùng kiểu.
    Ví dụ:
        String[] names = new String[3];
        names[0] = "Linh";
        names[1] = "Mai";
        names[2] = "Nam";

Giá trị mặc định trong mảng
    Khi khởi tạo bằng new, các phần tử sẽ có giá trị mặc định:
    Số nguyên (int, long, byte): 0
    Số thực (float, double): 0.0
    boolean: false
    char: ký tự rỗng \u0000
    Kiểu đối tượng (String, Object...): null

Mảng nhiều chiều
    Java hỗ trợ mảng nhiều chiều (thường gặp nhất là 2 chiều).

    int[][] matrix = new int[3][4];   // mảng 3x4
    matrix[0][1] = 5;

    // Khởi tạo trực tiếp
    int[][] data = {
        {1, 2, 3},
        {4, 5, 6}
    };

Vòng lặp với mảng
    Dùng for thường:
        for (int i = 0; i < numbers.length; i++) {
            System.out.println(numbers[i]);
        }

    Dùng for-each (enhanced for):
        for (int n : numbers) {
            System.out.println(n);
        }

✅ Ưu điểm khi dùng mảng
    Truy cập nhanh
        Các phần tử nằm liền kề trong bộ nhớ → việc truy cập theo chỉ số (array[i]) có độ phức tạp O(1).
    Đơn giản, dễ dùng
        Cú pháp ngắn gọn, dễ hiểu cho các bài toán cơ bản.
    Tiết kiệm bộ nhớ
        Do kích thước cố định và lưu trực tiếp giá trị (với kiểu nguyên thủy), nên thường tiêu tốn ít tài
            nguyên hơn so với các cấu trúc phức tạp (ArrayList, LinkedList).
    Tính nhất quán
        Tất cả phần tử trong mảng bắt buộc cùng kiểu → dễ kiểm soát dữ liệu.

❌ Nhược điểm của mảng
    Kích thước cố định
        Khi đã khởi tạo, không thể thay đổi số phần tử. Nếu cần co giãn linh hoạt phải dùng ArrayList hoặc các Collection khác.
    Khó thao tác thêm/xóa
        Muốn thêm/xóa ở giữa mảng thì phải dịch chuyển các phần tử → tốn thời gian O(n).(ko chèn trưc tiêp mà phải tạo mảng mới)
    Thiếu tính năng tiện ích
        Không có sẵn các hàm như tìm kiếm, sắp xếp, thêm/xóa (phải tự code hoặc dùng Arrays / Collections).
    Khó mở rộng với dữ liệu phức tạp
        Mảng 2 chiều trở lên dễ gây rối, khó quản lý khi xử lý dữ liệu lớn.

Note: Các trường hợp nên ưu tiên dùng mảng (Array) trong Java
    1. Kích thước dữ liệu cố định, biết trước
        Khi bạn biết chắc số lượng phần tử không thay đổi trong suốt chương trình.
        Ví dụ: danh sách 7 ngày trong tuần, 12 tháng trong năm, ma trận toán học với kích thước cố định.
        String[] days = {"Mon", "Tue", "Wed", "Thu", "Fri", "Sat", "Sun"};
    2. Hiệu năng truy cập quan trọng
        Mảng cho phép truy cập trực tiếp theo chỉ số arr[i] với độ phức tạp O(1).
        Nhanh hơn so với ArrayList (dù cũng O(1), nhưng phải qua lớp bao bọc).
        Thích hợp khi cần xử lý số liệu lớn với tốc độ cao (ví dụ: xử lý ảnh, game, tính toán số học).
    3. Dùng với kiểu dữ liệu nguyên thủy (primitive)
        Mảng lưu trực tiếp int, double, char… → tiết kiệm bộ nhớ hơn ArrayList<Integer> (do boxing/unboxing).
        Khi xử lý dữ liệu số lượng lớn (ví dụ: mảng int[1_000_000]) thì array nhanh và ít tốn bộ nhớ hơn.
    4. Mảng nhiều chiều (ma trận)
        Khi làm việc với ma trận, bảng, lưới (2D, 3D) → dùng mảng thuận tiện và tự nhiên hơn so với ArrayList<ArrayList<...>>.
        int[][] matrix = new int[3][3];
    5. Khi ưu tiên đơn giản
        Với dữ liệu nhỏ, ít thao tác thêm/xóa, dùng mảng giúp code ngắn gọn, dễ đọc, không cần khởi tạo ArrayList.