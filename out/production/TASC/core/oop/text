1. 4 T√≠nh ch·∫•t ch√≠nh c·ªßa OOP
    Encapsulation (ƒê√≥ng g√≥i)
        G√≥i d·ªØ li·ªáu (thu·ªôc t√≠nh) v√† h√†nh vi (ph∆∞∆°ng th·ª©c) v√†o trong c√πng m·ªôt class.
        Che gi·∫•u chi ti·∫øt b√™n trong, ch·ªâ cho ph√©p truy c·∫≠p th√¥ng qua c√°c ph∆∞∆°ng th·ª©c c√¥ng khai (getter/setter).
        ‚Üí Gi√∫p b·∫£o m·∫≠t d·ªØ li·ªáu v√† d·ªÖ b·∫£o tr√¨.

    Inheritance (K·∫ø th·ª´a)
        L·ªõp con c√≥ th·ªÉ k·∫ø th·ª´a thu·ªôc t√≠nh v√† ph∆∞∆°ng th·ª©c c·ªßa l·ªõp cha.
        T√°i s·ª≠ d·ª•ng code, m·ªü r·ªông ch·ª©c nƒÉng.
        Quan h·ªá "is-a" (Dog is a Animal).


    Polymorphism (ƒêa h√¨nh)
        M·ªôt h√†nh ƒë·ªông c√≥ th·ªÉ ƒë∆∞·ª£c th·ª±c hi·ªán theo nhi·ªÅu c√°ch kh√°c nhau.
        C√≥ 2 lo·∫°i:
            Overloading (ƒëa h√¨nh t·∫°i compile-time ‚Äì c√πng t√™n method nh∆∞ng tham s·ªë kh√°c nhau).
            Overriding (ƒëa h√¨nh t·∫°i runtime ‚Äì l·ªõp con ghi ƒë√® method c·ªßa l·ªõp cha).

    Abstraction (Tr·ª´u t∆∞·ª£ng)
        ·∫®n ƒëi chi ti·∫øt c√†i ƒë·∫∑t, ch·ªâ cung c·∫•p nh·ªØng g√¨ c·∫ßn thi·∫øt cho ng∆∞·ªùi d√πng.
        Th·ª±c hi·ªán qua abstract class ho·∫∑c interface.
        Gi√∫p t·∫≠p trung v√†o c√°i g√¨ ƒë·ªëi t∆∞·ª£ng l√†m, h∆°n l√† l√†m nh∆∞ th·∫ø n√†o.

2. Access Modifier trong Java
    Trong Java c√≥ 4 lo·∫°i modifier ch√≠nh:
        1. public
            C√≥ th·ªÉ truy c·∫≠p t·ª´ m·ªçi n∆°i (m·ªçi class, m·ªçi package).
            D√πng khi b·∫°n mu·ªën API/thu·ªôc t√≠nh/ph∆∞∆°ng th·ª©c d√πng chung cho t·∫•t c·∫£.
            V√≠ d·ª•:
                public class Person {
                    public String name;  // ai c≈©ng truy c·∫≠p ƒë∆∞·ª£c
                    public void sayHello() {
                        System.out.println("Hello!");
                    }
                }

        2. protected
            Truy c·∫≠p ƒë∆∞·ª£c trong c√πng package.
            Ngo√†i package ch·ªâ truy c·∫≠p ƒë∆∞·ª£c n·∫øu l√† l·ªõp con (k·∫ø th·ª´a).
            D√πng khi mu·ªën cho ph√©p m·ªôt nh√≥m class li√™n quan ho·∫∑c l·ªõp con s·ª≠ d·ª•ng.
            V√≠ d·ª•:
                class Animal {
                    protected String type = "Mammal";
                }

                class Dog extends Animal {
                    void printType() {
                        System.out.println(type); // OK v√¨ l√† l·ªõp con
                    }
                }

        3. (default) ‚Äì package-private (kh√¥ng ghi g√¨ c·∫£)
            Truy c·∫≠p ƒë∆∞·ª£c trong c√πng package.
            Kh√¥ng truy c·∫≠p ƒë∆∞·ª£c t·ª´ package kh√°c.
            D√πng khi b·∫°n mu·ªën ‚Äúinternal use only‚Äù trong 1 package.
            V√≠ d·ª•:
                class Student {  // m·∫∑c ƒë·ªãnh: ch·ªâ trong package
                    String id;   // kh√¥ng ghi modifier => default
                }

        4. private
            Ch·ªâ truy c·∫≠p ƒë∆∞·ª£c trong c√πng class.
            Kh√¥ng th·ªÉ truy c·∫≠p t·ª´ class kh√°c (k·ªÉ c·∫£ l·ªõp con).
            D√πng ƒë·ªÉ ƒë√≥ng g√≥i d·ªØ li·ªáu (encapsulation).
            V√≠ d·ª•:
                class Account {
                    private double balance; // ch·ªâ truy c·∫≠p trong class n√†y

                    public void deposit(double amount) {
                        balance += amount;
                    }

                    public double getBalance() {
                        return balance; // ch·ªâ expose qua getter
                    }
                }
    T√≥m t·∫Øt
    | Modifier   | Trong class | Trong package | L·ªõp con kh√°c package | B·∫•t k·ª≥ n∆°i n√†o |
    |------------|-------------|---------------|-----------------------|----------------|
    | public     | ‚úÖ           | ‚úÖ             | ‚úÖ                     | ‚úÖ              |
    | protected  | ‚úÖ           | ‚úÖ             | ‚úÖ                     | ‚ùå              |
    | (default)  | ‚úÖ           | ‚úÖ             | ‚ùå                     | ‚ùå              |
    | private    | ‚úÖ           | ‚ùå             | ‚ùå                     | ‚ùå              |

3. Class v√† Instance
    üîπ Class
        L√† b·∫£n thi·∫øt k·∫ø (blueprint) ƒë·ªÉ t·∫°o ra ƒë·ªëi t∆∞·ª£ng.
        Ch·ªâ m√¥ t·∫£ thu·ªôc t√≠nh (fields) v√† h√†nh vi (methods).
        Kh√¥ng chi·∫øm b·ªô nh·ªõ cho d·ªØ li·ªáu th·ª±c t·∫ø cho ƒë·∫øn khi ƒë∆∞·ª£c kh·ªüi t·∫°o.
        V√≠ d·ª•:

        public class Car {
            String brand;    // thu·ªôc t√≠nh
            int year;

            void drive() {   // ph∆∞∆°ng th·ª©c
                System.out.println("The car is driving...");
            }
        }

        ·ªû ƒë√¢y Car l√† class.

    üîπ Instance (ƒê·ªëi t∆∞·ª£ng)
        L√† th·ª±c th·ªÉ c·ª• th·ªÉ ƒë∆∞·ª£c t·∫°o ra t·ª´ class (d√πng new).
        M·ªói instance c√≥ b·ªô nh·ªõ ri√™ng cho d·ªØ li·ªáu c·ªßa n√≥.
        M·ªôt class c√≥ th·ªÉ t·∫°o ra nhi·ªÅu instance.
        V√≠ d·ª•:

            public class Main {
                public static void main(String[] args) {
                    Car car1 = new Car();  // instance 1
                    car1.brand = "Toyota";
                    car1.year = 2020;

                    Car car2 = new Car();  // instance 2
                    car2.brand = "Honda";
                    car2.year = 2021;

                    System.out.println(car1.brand); // Toyota
                    System.out.println(car2.brand); // Honda
                }
            }

        ·ªû ƒë√¢y car1, car2 l√† instances c·ªßa class Car.

    T√≥m g·ªçn
        Class: ƒê·ªãnh nghƒ©a ‚Üí gi·ªëng nh∆∞ "b·∫£n thi·∫øt k·∫ø".
        Instance: ƒê·ªëi t∆∞·ª£ng c·ª• th·ªÉ ‚Üí gi·ªëng nh∆∞ "ng√¥i nh√† ƒë∆∞·ª£c x√¢y t·ª´ b·∫£n thi·∫øt k·∫ø".

4. Interface vs Abstract class

| Ti√™u ch√≠                  | Abstract Class                                         | Interface                                                                     |
| ------------------------- | ------------------------------------------------------ | ----------------------------------------------------------------------------- |
| **ƒê·ªãnh nghƒ©a              | L·ªõp tr·ª´u t∆∞·ª£ng, c√≥ th·ªÉ ch·ª©a abstract + concrete method | Ch·ªâ khai b√°o h√†nh vi, m·∫∑c ƒë·ªãnh abstract (Java 8+ c√≥ default/static method)    |
| **Ph∆∞∆°ng th·ª©c             | C√≥ th·ªÉ c√≥ abstract v√† concrete method                  | M·∫∑c ƒë·ªãnh abstract, Java 8+ c√≥ th·ªÉ c√≥ `default`/`static`                       |
| **Bi·∫øn/Thu·ªôc t√≠nh         | C√≥ th·ªÉ c√≥ instance variable + static variable          | Ch·ªâ c√≥ `public static final` (h·∫±ng s·ªë)                                        |
| **Constructor             | C√≥ th·ªÉ c√≥                                              | Kh√¥ng c√≥                                                                      |
| **K·∫ø th·ª´a/Implement       | M·ªôt class ch·ªâ ƒë∆∞·ª£c k·∫ø th·ª´a 1 abstract class            | M·ªôt class c√≥ th·ªÉ implement nhi·ªÅu interface                                    |
| **Khi s·ª≠ d·ª•ng             | Chia s·∫ª code chung, quan h·ªá ‚Äúis-a‚Äù                     | ƒêa k·∫ø th·ª´a h√†nh vi, kh√¥ng li√™n quan v·∫´n d√πng chung                            |
| **M·ª©c ƒë·ªô truy c·∫≠p         | C√≥ th·ªÉ public, protected, private                      | M·∫∑c ƒë·ªãnh t·∫•t c·∫£ ph∆∞∆°ng th·ª©c l√† `public` (tr·ª´ default/static)                  |
| **Kh·∫£ nƒÉng override       | Class con c√≥ th·ªÉ override abstract/concrete method     | Class implement ph·∫£i override method abstract; default method c√≥ th·ªÉ override |
| **Kh·∫£ nƒÉng ch·ª©a d·ªØ li·ªáu   | C√≥ th·ªÉ ch·ª©a tr·∫°ng th√°i (state)                         | Kh√¥ng ch·ª©a tr·∫°ng th√°i, ch·ªâ h·∫±ng s·ªë                                            |
| **H·ªó tr·ª£ Java version     | T·ª´ Java 1.0                                            | T·ª´ Java 1.0; Java 8+ h·ªó tr·ª£ default/static method                             |
| **ƒêa k·∫ø th·ª´a              | Kh√¥ng h·ªó tr·ª£ ƒëa k·∫ø th·ª´a                                | H·ªó tr·ª£ ƒëa k·∫ø th·ª´a (implement nhi·ªÅu interface)                                 |
 Note: Concrete method = method b√¨nh th∆∞·ªùng v·ªõi { ... } ch·ª©a logic th·ª±c thi.

    Tr∆∞·ªùng h·ª£p s·ª≠ d·ª•ng
        Abstract class:
            Khi c√°c class con c√πng lo·∫°i, mu·ªën chia s·∫ª code chung.
                V√≠ d·ª•: Animal abstract class ‚Üí Dog, Cat k·∫ø th·ª´a, c√πng d√πng ph∆∞∆°ng th·ª©c eat().

        Interface:
            Khi mu·ªën ƒëa k·∫ø th·ª´a h√†nh vi.
            V√≠ d·ª•: Flyable, Swimmable ‚Üí Duck implement c·∫£ hai.

    N√™u tr∆∞·ªùng h·ª£p s·ª≠ d·ª•ng c·ª• th·ªÉ. N·∫øu 2 interface ho·∫∑c 1 abstract v√† 1 interface c√≥ 1 function c√πng t√™n,
    c√≥ th·ªÉ c√πng ho·∫∑c kh√°c ki·ªÉu tr·∫£ v·ªÅ c√πng ƒë∆∞·ª£c k·∫ø th·ª´a b·ªüi m·ªôt class, chuy·ªán g√¨ s·∫Ω x·∫£y ra?
        a. Hai interface c√πng t√™n method
            interface A {
                void doSomething();
            }

            interface B {
                void doSomething();
            }

            // L·ªõp implement c·∫£ hai interface
            class C implements A, B {
                @Override
                public void doSomething() {
                    System.out.println("Implement doSomething in C");
                }
            }

            ‚úÖ K·∫øt lu·∫≠n: Java cho ph√©p. Class C ph·∫£i override method ƒë√≥ m·ªôt l·∫ßn, d√πng chung cho c·∫£ interface.

        b. Abstract class + interface c√≥ method c√πng t√™n
            abstract class D {
                abstract void doSomething();
            }

            interface E {
                void doSomething();
            }

            class F extends D implements E {
                @Override
                public void doSomething() {
                    System.out.println("Implement doSomething in F");
                }
            }

            ‚úÖ K·∫øt lu·∫≠n: Java v·∫´n cho ph√©p. Class F ch·ªâ c·∫ßn override 1 l·∫ßn, d√πng chung cho c·∫£ abstract class v√† interface.

        c. Tr∆∞·ªùng h·ª£p kh√°c ki·ªÉu tr·∫£ v·ªÅ
        N·∫øu 2 method kh√°c ki·ªÉu tr·∫£ v·ªÅ, Java s·∫Ω b√°o l·ªói compile-time.
            interface X { int foo(); }
            interface Y { String foo(); } // kh√°c ki·ªÉu tr·∫£ v·ªÅ

            class Z implements X, Y { // ‚ùå L·ªói compile
                public int foo() { return 0; }
            }

        L√Ω do: Java kh√¥ng th·ªÉ x√°c ƒë·ªãnh ph∆∞∆°ng th·ª©c n√†o ƒë∆∞·ª£c g·ªçi, g√¢y ambiguity.
        N·∫øu c√πng ki·ªÉu tr·∫£ v·ªÅ ‚Üí kh√¥ng v·∫•n ƒë·ªÅ g√¨, override 1 l·∫ßn l√† xong
        N·∫øu kh√°c ki·ªÉu tr·∫£ v·ªÅ ‚Üí kh√¥ng th·ªÉ c√πng k·∫ø th·ª´a, ph·∫£i s·ª≠a t√™n ho·∫∑c ki·ªÉu tr·∫£ v·ªÅ.

5. Overloading and Overriding
    Overriding (Ghi ƒë√®)
        L√† vi·ªác l·ªõp con vi·∫øt l·∫°i ph∆∞∆°ng th·ª©c ƒë√£ c√≥ trong l·ªõp cha.
        M·ª•c ƒë√≠ch: thay ƒë·ªïi c√°ch ho·∫°t ƒë·ªông c·ªßa method trong l·ªõp con.
        ƒêi·ªÅu ki·ªán:
            T√™n method gi·ªëng h·ªát method c·ªßa l·ªõp cha.
            Tham s·ªë gi·ªëng h·ªát.
            Ki·ªÉu tr·∫£ v·ªÅ c√πng ho·∫∑c t∆∞∆°ng th√≠ch (covariant return type).
            Kh√¥ng gi·∫£m m·ª©c ƒë·ªô truy c·∫≠p (private ‚Üí kh√¥ng th·ªÉ override).
        V√≠ d·ª•
            class Animal {
                void makeSound() {
                    System.out.println("Animal makes sound");
                }
            }

            class Dog extends Animal {
                @Override
                void makeSound() {
                    System.out.println("Dog says: Woof Woof!");
                }
            }

            public class Main {
                public static void main(String[] args) {
                    Animal a = new Dog();
                    a.makeSound(); // Dog says: Woof Woof! ‚Üí runtime quy·∫øt ƒë·ªãnh
                }
            }
        ‚úÖ ƒê·∫∑c ƒëi·ªÉm: x·∫£y ra runtime ‚Üí Dynamic Polymorphism.

    Overloading (N·∫°p ch·ªìng)
        L√† vi·ªác c√πng t√™n method nh∆∞ng kh√°c tham s·ªë (s·ªë l∆∞·ª£ng ho·∫∑c ki·ªÉu) trong c√πng m·ªôt l·ªõp ho·∫∑c l·ªõp con.
        M·ª•c ƒë√≠ch: t√°i s·ª≠ d·ª•ng t√™n method cho nhi·ªÅu t√¨nh hu·ªëng kh√°c nhau.
        V√≠ d·ª•:
            class Calculator {
                int add(int a, int b) {
                    return a + b;
                }

                double add(double a, double b) {
                    return a + b;
                }

                int add(int a, int b, int c) {
                    return a + b + c;
                }
            }

            public class Main {
                public static void main(String[] args) {
                    Calculator calc = new Calculator();
                    System.out.println(calc.add(2, 3));      // 5
                    System.out.println(calc.add(2.5, 3.5));  // 6.0
                    System.out.println(calc.add(1, 2, 3));   // 6
                }
            }
        ‚úÖ ƒê·∫∑c ƒëi·ªÉm: x·∫£y ra compile-time ‚Üí Static Polymorphism.

    So s√°nh nhanh
    | Feature      | Overriding            | Overloading             |
    | ------------ | --------------------- | ----------------------- |
    | Th·ªùi ƒëi·ªÉm    | Runtime               | Compile-time            |
    | T√™n method   | Gi·ªëng h·ªát l·ªõp cha     | Gi·ªëng nhau              |
    | Tham s·ªë      | Gi·ªëng h·ªát             | Kh√°c s·ªë l∆∞·ª£ng ho·∫∑c ki·ªÉu |
    | Ki·ªÉu tr·∫£ v·ªÅ  | C√πng ho·∫∑c t∆∞∆°ng th√≠ch | C√≥ th·ªÉ kh√°c             |
    | Polymorphism | Dynamic (ƒë·ªông)        | Static (tƒ©nh)           |

6. M·ªôt function c√≥ access modifier l√† private or static c√≥ th·ªÉ overriding ƒë∆∞·ª£c kh√¥ng?
    Private method
        Kh√¥ng th·ªÉ override.
        L√Ω do: private ch·ªâ truy c·∫≠p trong c√πng class, l·ªõp con kh√¥ng th·∫•y method n√†y, n√™n kh√¥ng th·ªÉ ghi ƒë√®.
        N·∫øu b·∫°n vi·∫øt c√πng t√™n method trong l·ªõp con ‚Üí kh√¥ng ph·∫£i override, m√† l√† method m·ªõi ho√†n to√†n (method hiding).
        V√≠ d·ª•:
            class Parent {
                private void show() {
                    System.out.println("Parent show");
                }
            }

            class Child extends Parent {
                void show() { // ƒë√¢y l√† method m·ªõi, kh√¥ng override
                    System.out.println("Child show");
                }
            }

            public class Main {
                public static void main(String[] args) {
                    Child c = new Child();
                    c.show(); // Child show
                }
            }

    Static method
        Kh√¥ng th·ªÉ override, ch·ªâ c√≥ th·ªÉ hidden (method hiding).
        Khi g·ªçi method qua class, s·∫Ω g·ªçi version c·ªßa class ƒë√≥, kh√¥ng ph·ª• thu·ªôc object runtime.
        V√≠ d·ª•:
            class Parent {
                static void display() {
                    System.out.println("Parent display");
                }
            }

            class Child extends Parent {
                static void display() {
                    System.out.println("Child display");
                }
            }

            public class Main {
                public static void main(String[] args) {
                    Parent.display(); // Parent display
                    Child.display();  // Child display

                    Parent p = new Child();
                    p.display();      // Parent display (kh√¥ng ph·∫£i override)
                }
            }

7. - M·ªôt ph∆∞∆°ng th·ª©c final c√≥ th·ªÉ k·∫ø th·ª´a ƒë∆∞·ª£c kh√¥ng ?
    C√≥ th·ªÉ k·∫ø th·ª´a: t·ª©c l√† l·ªõp con s·∫Ω c√≥ ph∆∞∆°ng th·ª©c ƒë√≥, nh∆∞ng kh√¥ng th·ªÉ ghi ƒë√® (override).
    L√Ω do: final = b·∫•t bi·∫øn v·ªÅ h√†nh vi, l·ªõp con kh√¥ng ƒë∆∞·ª£c thay ƒë·ªïi c√†i ƒë·∫∑t method.
        class Parent {
            final void show() {
                System.out.println("This is a final method");
            }
        }

        class Child extends Parent {
            // ‚ùå Kh√¥ng th·ªÉ override
            // void show() { System.out.println("Try to override"); }
        }

        public class Main {
            public static void main(String[] args) {
                Child c = new Child();
                c.show(); // This is a final method
            }
        }

8. Ph√¢n bi·ªát hai t·ª´ kh√≥a This v√† Super
    this
    Tham chi·∫øu ƒë·∫øn ƒë·ªëi t∆∞·ª£ng hi·ªán t·∫°i (current object) c·ªßa l·ªõp ƒëang th·ª±c thi.
    D√πng ƒë·ªÉ:
        Truy c·∫≠p thu·ªôc t√≠nh instance c·ªßa l·ªõp.
        G·ªçi method kh√°c trong c√πng l·ªõp.
        G·ªçi constructor kh√°c trong c√πng l·ªõp (this(...)).
        V√≠ d·ª•
            class Person {
                String name;

                Person(String name) {
                    this.name = name; // this tr·ªè t·ªõi bi·∫øn instance c·ªßa object hi·ªán t·∫°i
                }

                void printName() {
                    System.out.println(this.name); // this c√≥ th·ªÉ b·ªè c≈©ng ƒë∆∞·ª£c
                }

                Person() {
                    this("Unknown"); // g·ªçi constructor kh√°c trong c√πng class
                }
            }

    super
    Tham chi·∫øu ƒë·∫øn l·ªõp cha (superclass) c·ªßa ƒë·ªëi t∆∞·ª£ng hi·ªán t·∫°i.
    D√πng ƒë·ªÉ:
        Truy c·∫≠p thu·ªôc t√≠nh ho·∫∑c method l·ªõp cha b·ªã override.
        G·ªçi constructor c·ªßa l·ªõp cha (super(...)).
    V√≠ d·ª•:
        class Animal {
            void eat() {
                System.out.println("Animal is eating");
            }
        }

        class Dog extends Animal {
            void eat() {
                super.eat(); // g·ªçi method eat() c·ªßa l·ªõp cha
                System.out.println("Dog is eating"); // ghi ƒë√® th√™m
            }

            Dog() {
                super(); // g·ªçi constructor l·ªõp cha
            }
        }

        So s√°nh nhanh
        | Feature          | `this`                                   | `super`                                 |
        | ---------------- | ---------------------------------------- | --------------------------------------- |
        | Tham chi·∫øu       | ƒê·ªëi t∆∞·ª£ng hi·ªán t·∫°i                       | L·ªõp cha c·ªßa ƒë·ªëi t∆∞·ª£ng                   |
        | D√πng cho         | Thu·ªôc t√≠nh, method, constructor c√πng l·ªõp | Thu·ªôc t√≠nh, method, constructor l·ªõp cha |
        | G·ªçi constructor  | `this(...)`                                 | `super(...)`                            |
        | G·ªçi method/field | `this.field` / `this.method()`           | `super.field` / `super.method()`        |

