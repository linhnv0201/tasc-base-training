Queue Interface (java.util.Queue)
    Queue là một interface trong package java.util, đại diện cho một hàng đợi (queue).
    Đặc điểm:
        FIFO: Phần tử được thêm vào cuối và lấy ra từ đầu.
        Không thể truy cập trực tiếp theo index như List.
        Không chứa các phương thức random access (như get(index)).
        Các phương thức quan trọng:
            add(E e) / offer(E e) → thêm phần tử vào queue
            remove() / poll() → xóa và trả về phần tử đầu
            element() / peek() → lấy phần tử đầu nhưng không xóa
        Các class triển khai phổ biến: LinkedList, PriorityQueue, ArrayDeque.
        | Class           | Khi nào dùng                                                                                 |
        | --------------- | -------------------------------------------------------------------------------------------- |
        | `LinkedList`    | Queue thông thường, cần thao tác FIFO, có thể làm deque luôn                                 |
        | `PriorityQueue` | Queue theo thứ tự ưu tiên (không theo FIFO), thích hợp cho heap/priority scheduling          |
        | `ArrayDeque`    | Queue hiệu năng cao, không giới hạn, thay thế `LinkedList` khi không cần truy cập theo index |

      Tham khảo thêm:
      https://cafedev.vn/tu-hoc-java-blockingqueue-trong-java/
       | Class / Interface         | Đặc điểm chính                                                                                                                                     |
       | ------------------------- | -------------------------------------------------------------------------------------------------------------------------------------------------- |
       | **LinkedList**            | - Triển khai `Queue` và `Deque`.<br>- Có thể dùng như queue FIFO hoặc deque.<br>- Thêm/xóa đầu/cuối O(1).                                          |
       | **ArrayDeque**            | - Triển khai `Deque`.<br>- Không giới hạn kích thước (tự mở rộng).<br>- Nhanh hơn `LinkedList`, dùng cho stack hoặc queue.<br>- Không thread-safe. |
       | **PriorityQueue**         | - Queue có thứ tự dựa trên **Comparable** hoặc **Comparator**.<br>- Không bảo toàn thứ tự chèn.<br>- Truy xuất head nhanh O(1), thêm/xóa O(log n). |
       | **ConcurrentLinkedQueue** | - Queue **thread-safe**, lock-free.<br>- FIFO, dùng trong môi trường đa luồng.                                                                     |
       | **LinkedBlockingQueue**   | - Thread-safe, dùng trong **Producer-Consumer**.<br>- Có thể giới hạn capacity.<br>- Thường dùng trong ThreadPoolExecutor.                         |
       | **ArrayBlockingQueue**    | - Thread-safe, **fixed capacity**.<br>- Thường dùng cho producer-consumer.                                                                         |
       | **DelayQueue**            | - Thread-safe, chứa các item có delay.<br>- Item chỉ có thể lấy khi delay hết.                                                                     |
       | **SynchronousQueue**      | - Thread-safe, **không lưu trữ**.<br>- Mỗi `put()` phải chờ `take()`. Dùng trong thread pool.                                                      |
       | **PriorityBlockingQueue** | - Thread-safe, giống `PriorityQueue` nhưng cho đa luồng.                                                                                           |



Deque Interface (java.util.Deque)
    Đặc điểm:
        Double-Ended Queue: Thêm/xóa được cả đầu và cuối.
        Kế thừa Queue, nên có tất cả phương thức của Queue.
        Hỗ trợ cả LIFO (stack) và FIFO (queue).
        Các phương thức quan trọng:
            Thêm: addFirst(E e), addLast(E e), offerFirst(E e), offerLast(E e)
            Lấy/xóa: removeFirst(), removeLast(), pollFirst(), pollLast()
            Lấy nhưng không xóa: getFirst(), getLast(), peekFirst(), peekLast()
        Các class triển khai phổ biến: LinkedList, ArrayDeque.
        | Class        | Khi nào dùng                                                                     |
        | ------------ | -------------------------------------------------------------------------------- |
        | `LinkedList` | Deque linh hoạt, cả FIFO và LIFO, thêm/xóa đầu/cuối dễ dàng                      |
        | `ArrayDeque` | Deque hiệu năng cao, thay thế `Stack` và `LinkedList` khi không cần synchronized |


Tóm tắt sự khác biệt Queue vs Deque:
| Tiêu chí       | Queue                                       | Deque                                 |
| -------------- | ------------------------------------------- | ------------------------------------- |
| Truy cập       | Chỉ đầu/ cuối (FIFO)                        | Cả đầu và cuối                        |
| Thứ tự         | FIFO                                        | FIFO hoặc LIFO                        |
| Thêm/xóa       | Cuối/ đầu                                   | Cả đầu và cuối                        |
| Class phổ biến | `LinkedList`, `PriorityQueue`, `ArrayDeque` | `LinkedList`, `ArrayDeque`            |
| Khi dùng       | Task scheduling, hàng đợi thông thường      | Khi cần Queue + Stack, thao tác 2 đầu |

Deque Interface
| Thao tác                                  | ArrayDeque                            | LinkedList             | Ghi chú                                                      |
| ----------------------------------------- | ------------------------------------- | ---------------------- | ------------------------------------------------------------ |
| **Thêm/xóa ở đầu/cuối**                   | O(1)\*                                | O(1)                   | Với `ArrayDeque` là **amortized O(1)** vì đôi khi cần resize |
| **Truy cập phần tử theo chỉ số (get(i))** | O(1)                                  | O(n)                   | Vì `ArrayDeque` dùng mảng, còn `LinkedList` phải duyệt node  |
| **Tìm kiếm phần tử**                      | O(n)                                  | O(n)                   | Cả hai phải duyệt tuyến tính                                 |
| **Chèn/xóa ở giữa (khi đã có Iterator)**  | O(n) (dịch mảng)                      | O(1) (chỉ đổi con trỏ) | Đây là điểm mạnh duy nhất của `LinkedList`                   |
| **Duyệt tuần tự (iteration)**             | O(n) nhưng nhanh hơn (cache-friendly) | O(n) nhưng chậm hơn    | Do locality của bộ nhớ                                       |

