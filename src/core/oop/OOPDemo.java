package core.oop;

// üîπ Abstraction: interface m√¥ t·∫£ h√†nh vi chung
interface Animal {
    void makeSound(); // ch·ªâ khai b√°o, kh√¥ng c√†i ƒë·∫∑t
}

// üîπ Inheritance: Dog k·∫ø th·ª´a t·ª´ BaseAnimal
abstract class BaseAnimal implements Animal {
    private String name; // üîπ Encapsulation: thu·ªôc t√≠nh private

    public BaseAnimal(String name) {
        this.name = name;
    }

    // getter & setter -> ki·ªÉm so√°t truy c·∫≠p
    public String getName() {
        return name;
    }

    public void setName(String name) {
        this.name = name;
    }

    // method chung cho t·∫•t c·∫£ lo√†i v·∫≠t
    public void eat() {
        System.out.println(name + " is eating...");
    }
}

// üîπ Dog k·∫ø th·ª´a t·ª´ BaseAnimal (Inheritance)
class Dog extends BaseAnimal {
    public Dog(String name) {
        super(name);
    }

    // üîπ Polymorphism (Overriding)
    @Override
    public void makeSound() {
        System.out.println(getName() + " says: Woof Woof!");
    }
}

// üîπ Cat k·∫ø th·ª´a t·ª´ BaseAnimal (Inheritance)
class Cat extends BaseAnimal {
    public Cat(String name) {
        super(name);
    }

    // üîπ Polymorphism (Overriding)
    @Override
    public void makeSound() {
        System.out.println(getName() + " says: Meow Meow!");
    }
}

public class OOPDemo {
    public static void main(String[] args) {
        Animal dog = new Dog("Buddy");
        Animal cat = new Cat("Kitty");

        dog.makeSound(); // Polymorphism -> Woof Woof
        cat.makeSound(); // Polymorphism -> Meow Meow

        // Downcasting theo c√°ch c≈© (Java 11)
        if (dog instanceof BaseAnimal) {
            BaseAnimal d = (BaseAnimal) dog;
            d.eat(); // Buddy is eating...
        }
        if (cat instanceof BaseAnimal) {
            BaseAnimal c = (BaseAnimal) cat;
            c.eat(); // Kitty is eating...
        }
    }
}
